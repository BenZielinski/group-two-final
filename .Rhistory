trip_data <- read.csv("data/trip.csv", stringsAsFactors = FALSE)
weather_data <- read.csv("data/weather.csv", stringsAsFactors = FALSE)
station_data <- read.csv("data/station.csv", stringsAsFactors = FALSE)
library(dplyr)
#filter useful data information
yusha_small_data <- trip_data %>%
select(starttime, from_station_id, to_station_id)
#convert into datetime format
yusha_small_data$starttime <- mdy_hm(yusha_small_data$starttime)
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(parsetR)
trip_data <- read.csv("data/trip.csv", stringsAsFactors = FALSE)
weather_data <- read.csv("data/weather.csv", stringsAsFactors = FALSE)
station_data <- read.csv("data/station.csv", stringsAsFactors = FALSE)
#filter useful data information
yusha_small_data <- trip_data %>%
select(starttime, from_station_id, to_station_id)
#convert into datetime format
yusha_small_data$starttime <- mdy_hm(yusha_small_data$starttime)
yusha_small_data$starttime <- format(yusha_small_data$starttime, "%Y-%m-%d")
yusha_small_data$starttime <- ymd(yusha_small_data$starttime)
#extract year
yusha_small_data$year <- year(yusha_small_data$starttime)
#extract month
yusha_small_data$month <- month(yusha_small_data$starttime)
unique(yusha_small_data$month[yusha_small_data$year ==input$year])
unique(yusha_small_data$month[yusha_small_data$year == 2015])
shiny::runApp()
View(trip_data)
trip_data <- read.csv("data/trip.csv", stringsAsFactors = FALSE)
weather_data <- read.csv("data/weather.csv", stringsAsFactors = FALSE)
station_data <- read.csv("data/station.csv", stringsAsFactors = FALSE)
#filter useful data information
yusha_small_data <- trip_data %>%
select(starttime, from_station_name, to_station_name, from_station_id, to_station_id)
#convert into datetime format
yusha_small_data$starttime <- mdy_hm(yusha_small_data$starttime)
yusha_small_data$starttime <- format(yusha_small_data$starttime, "%Y-%m-%d")
yusha_small_data$starttime <- ymd(yusha_small_data$starttime)
#extract year
yusha_small_data$year <- year(yusha_small_data$starttime)
#extract month
yusha_small_data$month <- month(yusha_small_data$starttime)
View(yusha_small_data)
runApp()
runApp()
runApp()
runApp()
remove.packages("plyr", lib="~/R/win-library/3.4")
runApp()
shiny::runApp()
detach(package:plyr)
remove.packages(plyr)
remove.packages("plyr")
runApp()
install.packages("magrittr")
runApp()
remove.packages(magrittr)
remove.packages("magrittr")
runApp()
install.packages(plyr)
install.packages("plyr")
runApp()
library(plyr)
library(dplyr)
library(ggplot2)
library(plyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(ggplot2)
library(tidyr)
runApp()
I installed plyr and magrittr packages before but afte.
install.packages("magrittr")
runApp()
library(plyr)
library(magrittr)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(lubridate)
library(parsetR)
runApp()
shiny::runApp()
library(plyr)
library(plyr)
library(magrittr)
library(dplyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyr)
library(lubridate)
library(lubridate)
library(parsetR)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/ADMIN/Desktop/SP2018/STAT496")
# load libraries
library('ggplot2')
library('forecast')
library('tseries')
require(lmtest)
require(lmtest)
#read in data
drought <- read.csv("/project/Drought_ARIMA.csv")
#read in data
drought <- read.csv("project/Drought_ARIMA.csv")
drought <- as.data.frame(drought)
#convert drought data to time series, clean, and standardize dates
drought$CA.drought <- ts(drought$CA.drought)
drought$Date <- drought$Date-mean(drought$Date)
# fit arima model with regression
fit <- auto.arima(drought$CA.drought, xreg=drought$Date)
fit
#read in data
drought <- read.csv("project/Drought_ARIMA.csv")
drought <- as.data.frame(drought)
droughtTseries <- ts(drought[,2])
#check if drought data is stationary
drought.adf <- adf.test(droughtTseries) ##p-value = 0.01, reject null hypothesis, alternative is stationary.
drought.kpss <- kpss.test(droughtTseries) ##p-value = 0.07
drought.stl <- stl(droughtTseries, s.window = "periodic") ##error no seasonality
#Apply arima(1,0,0)
drought.arima <- auto.arima(droughtTseries) ##se = 0.0845
drought.arima
#Apply arima(1,0,0)
drought.arima <- auto.arima(droughtTseriesï¼Œxreg=drought$Date) ##se = 0.0845
#Apply arima(1,0,0)
drought.arima <- auto.arima(droughtTseries,xreg=drought$Date) ##se = 0.0845
drought.arima
#Apply arima(1,0,0)
drought.arima <- auto.arima(droughtTseries) ##se = 0.0845
drought.arima
View(drought)
#read in data
drought <- read.csv("project/Drought_ARIMA.csv")
drought <- as.data.frame(drought)
#convert drought data to time series, clean, and standardize dates
drought$CA.drought <- ts(drought$CA.drought)
drought$Date <- drought$Date-mean(drought$Date)
# fit arima model with regression
fit <- auto.arima(drought$CA.drought, xreg=drought$Date)
fit
#read in data
drought <- read.csv("project/Drought_ARIMA.csv")
drought <- as.data.frame(drought)
droughtTseries <- ts(drought[,2])
#check if drought data is stationary
drought.adf <- adf.test(droughtTseries) ##p-value = 0.01, reject null hypothesis, alternative is stationary.
drought.kpss <- kpss.test(droughtTseries) ##p-value = 0.07
drought.stl <- stl(droughtTseries, s.window = "periodic") ##error no seasonality
#Apply arima(1,0,0)
drought.arima <- auto.arima(droughtTseries) ##se = 0.0845
#Predict future trend of Palmer index in ten years.
drought.forecast <- forecast(drought.arima)
drought.arima
droughtTseries <- ts(drought[,2])
#Apply arima(1,0,0)
drought.arima <- auto.arima(droughtTseries, xreg =drought$Date ) ##se = 0.0845
drought.arima
drought.adf <- adf.test(drought$CA.drought)
drought.adf
# fit arima model with regression
fit <- auto.arima(drought$CA.drought, xreg=drought$Date)
fit
summary(fit)
coeftest(fit)
library(plyr)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(energy)
library(tidyr)
CA <- read.csv("CA.csv", header = TRUE, stringsAsFactors = FALSE)
head(CA)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = CA)+
geom_line(mapping = aes(x = Date , y = D.Value), color = "indianred2", alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "indianred2", method = "loess")+
geom_line(mapping = aes(x = Date , y = R.Value), color = "dodgerblue2", alpha=0.6)+
geom_smooth(mapping = aes(x = Date, y = R.Value), color = "dodgerblue2", method = "loess" )+
geom_point(mapping=aes(x = Date, y = D.Value), color = "indianred2",alpha = 0.5)+
geom_point(mapping = aes(x = Date, y = R.Value), color = "dodgerblue2", alpha = 0.5)+
labs(
title = "Palmer Drought Index & Precipitation in CA",
x ="Yearly 1895/12 - 2017/12",
y =" Palmer Drought Index & Precipitation(inch)"
)
WA <- read.csv("WA.csv", header = TRUE, stringsAsFactors = FALSE)
head(WA)
WA_D_LM <- lm(WA$D.Value ~ WA$Date)
summary(WA_D_LM)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), color = "blue", alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "orange", method = "loess")+
abline(WA_D_LM)+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), color = "blue", alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "orange", method = "loess")+
abline(WA$D.Value ~ WA$Date)+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), color = "blue", alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "orange", method = "loess")+
geom_abline(WA$D.Value ~ WA$Date)+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), color = "blue", alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "orange", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399, color = green)+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), color = "blue", alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "orange", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399, color = "green")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "orange", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399, color = "green")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "blue", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399, color = "green")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "skyblue", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399, color = "green")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "lightblue", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399, color = "green")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "skyblue", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399, color = "green")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "blue", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399, color = "green")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "blue", method = "loess")+
geom_abline(intercept = 0.001294, slope = -2.603399)+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
p <- ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "blue", method = "loess")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
#All year without grouping, fitting curve regression
#This is a method for fitting a smooth curve between two variables,
#or fitting a smooth surface between an outcome and up to four predictor variables
p <- ggplot(data = WA)+
geom_line(mapping = aes(x = Date , y = D.Value), alpha=0.6)+
geom_smooth(mapping = aes(x = Date , y = D.Value), color = "blue", method = "loess")+
labs(
title = "Palmer Drought Index in WA",
x ="Yearly 1895/12 - 2017/12",
y ="Palmer Drought Index & Precipitation(inch)"
)
p + geom_abline(intercept = 0.001294, slope = -2.603399)
geom_abline(intercept = 0.001294, slope = -2.603399)
+ geom_abline(intercept = 0.001294, slope = -2.603399)
p + geom_abline(intercept = 0.001294, slope = -2.603399)
View(WA)
data.sqrttrans <- function(x) {
if (x > 0) {
return(x = sqrt(x))
} else {
return(x = -sqrt(abs(x)))
}
}
revise <- numeric()
for(i in 1:nrow(WA)) {
revise <- c(revise, data.sqrttrans(WA$R.Value[i]))
}
droughtDataRevise <- cbind(WA, revise)
#Plot linear and smoothed regression line of Square root of Palmer index value to time.
ggplot(data = droughtDataRevise) +
geom_line(mapping = aes(x = Date, y = revise), color = "#999999") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "#00CC33", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "#6699FF") +
labs(
title = "Time - Square Root of Palmer Drought Index",
x ="Yearly 1895/12 - 2017/12",
y ="Square Root of Palmer Drought Index"
)
View(droughtDataRevise)
revise <- numeric()
for(i in 1:nrow(WA)) {
revise <- c(revise, data.sqrttrans(WA$D.Value[i]))
}
droughtDataRevise <- cbind(WA, revise)
#Plot linear and smoothed regression line of Square root of Palmer index value to time.
ggplot(data = droughtDataRevise) +
geom_line(mapping = aes(x = Date, y = revise), color = "#999999") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "#00CC33", method = "lm") +
geom_smooth(mapping = aes(x = Date, y = revise), color = "#6699FF") +
labs(
title = "Time - Square Root of Palmer Drought Index",
x ="Yearly 1895/12 - 2017/12",
y ="Square Root of Palmer Drought Index"
)
#read in data
drought <- read.csv("project/Drought_ARIMA.csv")
drought <- as.data.frame(drought)
#convert drought data to time series, clean, and standardize dates
drought$CA.drought <- ts(drought$CA.drought)
drought$CA.drought <- tsclean(drought$CA.drought)
drought$Date <- drought$Date-mean(drought$Date)
drought.adf <- adf.test(drought$CA.drought)
# fit arima model with regression
fit <- auto.arima(drought$CA.drought, xreg=drought$Date)
fit
coeftest(fit)
remove.packages("plyr", lib="~/R/win-library/3.4")
remove.packages("magrittr", lib="~/R/win-library/3.4")
remove.packages("dplyr", lib="~/R/win-library/3.4")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
setwd("C:/Users/ADMIN/Desktop/test")
setwd("C:/Users/ADMIN/Desktop/test")
library(shiny)
warnings()
install.packages("Rcpp")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/ADMIN/group-two-final")
